/* eslint-disable */
/* global instantsearch */

app({
  appId: 'latency',
  apiKey: '6be0576ff61c053d5f9a3225e2a90f76',
  indexName: 'demo-query-rules'
});

var randomCounter = Math.floor(Math.random() * 4);

function app(opts) {
  const search = instantsearch({
    appId: opts.appId,
    apiKey: opts.apiKey,
    indexName: opts.indexName,
    urlSync: true,
    searchParameters: {
      getRankingInfo: 1,
      hitsPerPage: 36,
      facets: ["actors"],
      maxValuesPerFacet: 20
    }
  });

  search.addWidget(
    instantsearch.widgets.searchBox({
      container: '#search-input',
      placeholder: 'Search for movies',
      reset: false,
      magnifier: false
    })
    );

  search.addWidget(
    instantsearch.widgets.hits({
      container: '#hits',
      templates: {
        item: getTemplate('hit'),
        empty: getTemplate('no-results')
      },
      transformData: function(hit) {
        // Display only matching actors' names
        if (hit._rankingInfo && hit._rankingInfo.promoted) {
          hit.promoted = true;
        }
        if (hit._highlightResult && hit._highlightResult.actors) {
          var actors = []
          for (var i = 0; i < hit._highlightResult.actors.length; ++i) {
            actor = hit._highlightResult.actors[i];
            if (actor.matchLevel !== "none") {
              actors.push(actor);
            }
          }
          hit._highlightResult.actors = actors;
        }
        return hit;
      }
    })
    );

  search.addWidget({
    init: function(params) {
      $(document).on('click', '.rules-scenarii', function(e) {
        e.preventDefault();
        var input = $("#search-input .ais-search-box--input");
        var value = "";
        switch(this.dataset.rule) {
          case "1":
            value = "star wars";
            input.val();
            break;
          case "2":
            value = "documentary";
            break;
          case "3":
            value = ["Brad Pitt", "Brad Pitt George Clooney", "Angelina Jolie", "Leonardo DiCaprio"][randomCounter++ % 4];
            break;
        }
        input.val(value).focus();
        search.helper.setQuery(value).search();
      });
    }
  });

  search.addWidget({
    render: function(options) {

      // Display promotional banners
      $("#promotional_banner").html("");
      var userData = options.results._rawResults[0].userData;
      if (userData) {
        for (var i = 0; i < userData.length; i++){
            $("#promotional_banner").html('<img src="./' + userData[i].banner_img_slug + '">');
        }
      }

      // Finding filters generated by query rules
      var facetActors = Object.keys($.grep(options.results.facets, function( x, _ ) { return x.name && x.name == "actors" })[0].data);
      $("#automatic-facet-actors").hide();
      var html = "Automatic filter on ";
      var matches = extractFilteredActors(options.results._rawResults[0].params);
      for (var i = 0; i < facetActors.length; i++){
        if (matches.includes(normalizeActor(facetActors[i]))) {
          $("#automatic-facet-actors").show();
          html += '<span>' + facetActors[i] + '</span>';
        }
      }
      $("#automatic-facet-actors").html(html);
    }
  });

  search.start();
}

function getTemplate(templateName) {
  return document.querySelector('#' + templateName + '-template').innerHTML;
}

function extractFilteredActors(params) {
  var filter = params.split("&").filter(function (el) { return el.startsWith('facetFilters=') }).join(" ");
  var regex = /[,"]?actors:(.*?)[,"]/g

  matches = []
  while ((match = regex.exec(filter)) != null) {
    matches.push(normalizeActor(match[1]));
  }
  return matches
}

function normalizeActor(filter) {
  return filter.normalize('NFD').toLowerCase().replace(/[^a-zA-Z0-9]+/g, "");
}
